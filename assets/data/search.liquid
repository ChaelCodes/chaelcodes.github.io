[
  
  {
    "title"    : "Links Page in Jekyll",
    "category" : "",
    "tags"     : " ",
    "url"      : "/2023/10/04/jekyll-links-page.html",
    "date"     : "October 4, 2023",
    "excerpt"  : "As a content creator, I love the look and feel of ‚Äúlink in bio‚Äù pages.\nThey‚Äôre such an easy and mobile-friendly way to share various social medias and projects.\nHowever, as a developer, I am frankly offended at the idea of needing a SAAS app to cr...",
  "content"  : "As a content creator, I love the look and feel of ‚Äúlink in bio‚Äù pages.\nThey‚Äôre such an easy and mobile-friendly way to share various social medias and projects.\nHowever, as a developer, I am frankly offended at the idea of needing a SAAS app to create a static page of links.\nThe idea of paying for such a service, or sharing my page with their branding is simply abhorrent.\nThankfully I have a Jekyll site and the ability to create &amp;lt;a&amp;gt; tags, so I‚Äôm able to avoid that dismal fate.‚ù§Ô∏è\n\n\nStep 1 - Create a links page\nLet‚Äôs create a new page in the /pages folder called links.html. We want html, because we‚Äôre going to be adding a lot of customizations.\n---\ntitle: Links\ndescription: Social media and helpful links for ChaelCodes!\npermalink: /links/\nhide: true\n---\n\nWe want a title for the tab title when it‚Äôs viewed in a browser. I‚Äôm happy with ‚ÄúLinks‚Äù even though it‚Äôs not very descriptive.\nThe description is what‚Äôll show up in link previews on other sites.\nOur permalink will be the link they access. In my case it‚Äôll look like chael.codes/links/ which is very slick.\nMy theme - type-on-strap - hides pages from the navbar with the frontmatter tag hide: true.\n\nInside the navbar there&#39;s some custom code to hide certain site pages.\n\nFor Minima, this functionality is missing, and it&#39;d need to be added to the header.\nCheck your theme to understand if there are built in options for hiding pages from the navigation.\n\nWe didn‚Äôt define a layout, which means our page won‚Äôt have a header, footer, nor navigation, which is what we want!\nAt this point, we have a blank page.\n\nCommit\n\nStep 2 - Strip out navigation and footer\n\nChances are high that your default layout has a header and footer. We need to make a new layout called ‚Äúempty‚Äù to strip those out. We still want all the meta info that‚Äôs in your head - this controls livereload, fonts, scss styling (which we‚Äôll add later), and more!\n\n\n&amp;lt;!DOCTYPE html&amp;gt;\n&amp;lt;html lang=&quot;en&quot;&amp;gt;\n  {% include default/head.liquid %}\n  &amp;lt;body&amp;gt;\n    {{ content }}\n  &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n\n\n\n---\ntitle: Links\ndescription: Social media and helpful links for ChaelCodes!\npermalink: /links/\nlayout: empty\nhide: true\n---\n\n\nCommit\n\nStep 3 - Define social links\nJekyll supports collections which are site data stored in yml files. These are parsed by Jekyll and make it easy to iterate over structured data.\n\nlinks:\n  - title: Twitch\n    link: https://twitch.tv/ChaelCodes\n    icon: fa-twitch\n  - title: YouTube\n    link: https://youtube.com/c/ChaelCodes\n    icon: fa-youtube\n  - title: GitHub\n    link: https://github.com/ChaelCodes\n    icon: fa-github\n\nYou can easily add and remove links by modifying the yml file, and there‚Äôs less danger of introducing mistakes due to copy/pasting.\nMy site theme supports font awesome icons, which is why mine are all fa-github or fa-&amp;lt;whatever&amp;gt; but obviously, you can use the icon library of your choice.\n\nCommit\n\nStep 3 - MAKE SOME LINKS\nLET‚ÄôS ADD SOME &amp;lt;a&amp;gt; TAGS!\n\n&amp;lt;ul&amp;gt;\n{% for social in site.data.social.links %}\n  &amp;lt;li&amp;gt;\n    &amp;lt;a href=&quot;{{social.link}}&quot;&amp;gt;{{social.title}}&amp;lt;/a&amp;gt;\n  &amp;lt;/li&amp;gt;\n{% endfor %}\n&amp;lt;/ul&amp;gt;\n\n\n\nIT‚ÄôS MAGNIFICENT!\n\n\n\nWe‚Äôre done! Everyone can access my links now! üôå\n\nCommit\n\nStep 4 - Add some buttons\n\nWe‚Äôre going to add an id to that ul to isolate it from other content on our site, then we‚Äôll create an scss file - links.scss for our styling!\n\nMake sure to import this new file in your theme&#39;s main scss file.\nMine uses _custom.scss to add additional files and styling.\n\n  \n    @import &#39;pages/links&#39;;\n  \n\n\n\n&amp;lt;ul id=&quot;links&quot;&amp;gt;\n\n\n/* --- links page styling -- */\n#links {\n  list-style-type: none;\n  margin-left: 0em;\n  font-family: $font-family-headings; // override text to use heading text instead of body\n\n  li {\n    a {\n      display: block;\n      margin: 1em 2em;\n      padding: $padding-small;\n      text-align: center;\n      background-color: var(--vivid-color-1);\n      color: white;\n    }\n  }\n}\n\n\nIt‚Äôs plain, but not we have a links page with a list of buttons!\n\n\n\nCommit\n\nStep 5 - Add a friendly face to the links page\nI think it‚Äôs really helpful to give people a little greeting and show them your avatar to reassure them that they‚Äôve ended up on the right page.\n\n  &amp;lt;div id=&quot;links-profile&quot;&amp;gt;\n    &amp;lt;img id=&quot;avatar&quot; src=&quot;/assets/img/profile_pic.jpg&quot; alt=&quot;profile pic of Chael smiling and wearing fib shawl&quot;/&amp;gt;\n    &amp;lt;p&amp;gt;To be honest, I can&#39;t keep track of all the places I&#39;m active either.&amp;lt;/p&amp;gt;\n  &amp;lt;/div&amp;gt;\n\n\n  #links-profile {\n    #avatar {\n      border-radius: 50%;\n      border: .2em solid var(--vivid-color-2);\n      width: 50%;\n      margin: 1em auto;\n      display: block;\n      padding: 0;\n    }\n\n    p {\n      text-align: center;\n    }\n  }\n\n\nThis is probably enough, right?\n\n\nCommit\n\nStep 6 - Fix desktop view\nLet‚Äôs just pop into desktop view for a fun screenshot!\n\nHuh. It‚Äôs just my face.\n\nThat‚Äôs not ideal.\n\nThe buttons aren‚Äôt much better. We‚Äôve only got 5 on the page.\n\nLet‚Äôs give this page a maximum width and center it!\n\n&amp;lt;div class=&quot;column&quot;&amp;gt;\n  &amp;lt;div id=&quot;links-profile&quot;&amp;gt;\n    &amp;lt;img id=&quot;avatar&quot; src=&quot;/assets/img/profile_pic.jpg&quot; alt=&quot;profile pic of Chael smiling and wearing fib shawl&quot;/&amp;gt;\n    &amp;lt;p&amp;gt;To be honest, I can&#39;t keep track of all the places I&#39;m active either.&amp;lt;/p&amp;gt;\n  &amp;lt;/div&amp;gt;\n  &amp;lt;ul id=&quot;links&quot;&amp;gt;\n    {% for social in site.data.social.links %}\n      &amp;lt;li&amp;gt;\n        &amp;lt;a href=&quot;{{social.link}}&quot;&amp;gt;{{social.title}}&amp;lt;/a&amp;gt;\n      &amp;lt;/li&amp;gt;\n    {% endfor %}\n  &amp;lt;/ul&amp;gt;\n&amp;lt;/div&amp;gt;\n\n\n.column {\n  max-width: 500px;\n  margin: 0 auto;\n}\n\nAnd now we have a perfectly functional and pleasant links page built in Jekyll!\n\n\n\nCommit\n\nStep ‚àû - Entirely Unnecessary Futzing to impress other developers\nThese are all going to be links to commits. You can see the result on my links page. I‚Äôll add any additional futzing I do to this list.\nAdd Icons\nCommit\n\nGradient Background to add Definition to Column\nCommit\n\nAnimated hover buttons\nCommit\n\nOpen links in new tab\nCommit\n"
} ,
  
  {
    "title"    : "Stop using `git add .`",
    "category" : "",
    "tags"     : " ",
    "url"      : "/2023/09/09/stop-git-add-dot.html",
    "date"     : "September 9, 2023",
    "excerpt"  : "git add . sets you up for failure, and it‚Äôs most prevalent in the community that it‚Äôs worst suited for: git beginners. Fixing a commit with unwanted changes in it is significantly harder than being intentional about what you commit to begin with. ...",
  "content"  : "git add . sets you up for failure, and it‚Äôs most prevalent in the community that it‚Äôs worst suited for: git beginners. Fixing a commit with unwanted changes in it is significantly harder than being intentional about what you commit to begin with. This article will go over how to make intentional commits, and then discuss the most common examples where I see git add . trip up developers.\n\n\ngit add . adds everything from your current folder.\n\n  version changes to lockfiles\n  editor config files\n  debugging statements\n  random unwanted whitespace changes\n  changes you actually want\n  changes you thought you wanted, but don‚Äôt\n\n\nInstead, I want you to intentionally add changes to your commit using git add -p, and I want you to add new files using git add filename or git add foldername.\n\nIntentional Git Commits\n1 - git status\n\nStart by looking at what changes git sees in your repo.\n\nThis command lists all the changes git sees. The first section is staged changes, which means they&#39;ll be included in the next commit you make. The next section is changes git sees to files that are tracked in git. The last section is important, these are untracked files. Git isn&#39;t looking at these files for changes yet. If you have files in the untracked section that you would never want to commit (node_modules or editor configs) you can add them to your .gitignore file and they&#39;ll no longer show up.\n\n\n&amp;gt; git status\nOn branch main\nYour branch is up to date with &#39;origin/main&#39;.\n\nChanges to be committed:\n  (use &quot;git restore --staged &amp;lt;file&amp;gt;...&quot; to unstage)\n        modified:   _config.yml\n\nChanges not staged for commit:\n  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)\n  (use &quot;git restore &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)\n        modified:   Gemfile.lock\n        modified:   _layouts/stretch.html\n        modified:   _posts/2023-06-25-fibonacci-shawl-pattern.md\n        modified:   _sass/layouts/_stretch.scss\n\nUntracked files:\n  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)\n        _posts/2023-07-09-stop-git-add-dot.md\n        _posts/vim-commands.md\n        _sass/base/\n        assets/img/profile_pic.JPG\n\n\n2 - git add &amp;lt;filename|foldername&amp;gt;\nAdd any files that you want that are currently untracked.\ngit isn&#39;t going to surface these files in the next step. They&#39;re untracked, which means git doesn&#39;t see them as part of your changes. `git add filename|foldername` both work, but you can also use `git add -N filename` to indicate that you want to track this file, but not stage it yet.\n\n\n3 - git commit -p\nPatch add changes then commit.\nReviewing each of your changes individually allows you to be intentional about your commits. You can break your commits down into smaller, more concise pieces, and exclude anything unnecessary, whether that&#39;s extra whitespace, debugging statements, or lockfile changes.\n\n&amp;gt; git commit -p\ndiff --git a/Gemfile.lock b/Gemfile.lock\nindex 8a0eca6..e94d073 100644\n--- a/Gemfile.lock\n+++ b/Gemfile.lock\n@@ -43,6 +43,7 @@ GEM\n       listen (~&amp;gt; 3.0)\n     jekyll-youtube (1.0.0)\n       jekyll\n+    json (2.6.3)\n     kramdown (2.4.0)\n       rexml\n     kramdown-parser-gfm (1.1.0)\n(1/3) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]\n&amp;gt;\n\n\nThere are a lot of different options for the hunk you‚Äôre working for. Use ? to see a printed list of them and select the best one for the situation. Some of my favorites are y for ‚Äúyes, I want this hunk‚Äù, n for ‚Äúno, I don‚Äôt want this hunk‚Äù, d for ‚Äúdon‚Äôt ask me again about this file‚Äù, and e for ‚Äúedit‚Äù.\n\n(1/3) Stage this hunk [y,n,q,a,d,j,J,g,/,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\nq - quit; do not stage this hunk or any of the remaining ones\na - stage this hunk and all later hunks in the file\nd - do not stage this hunk or any of the later hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\ne - manually edit the current hunk\n? - print help\n\n\nGenerated Files\nWe‚Äôre often using scaffolds or generate commands to create new files or the application. I recommend creating a commit immediately after running that command with the command as the commit message. Then all your future commits will be covered by patch adding, and you‚Äôll have a history of what the command generated vs what‚Äôs hand-crafted.\n\nWhen git add . Doesn‚Äôt Cut It\n\nUnwanted Untracked Files\nSometimes I‚Äôll have files locally that I don‚Äôt want to commit. node_modules, editor configs, and logfiles immediately come to mind. You can permanently exclude these by adding them to your .gitignore, but accidentally duplicated and renamed files, blog posts that aren‚Äôt ready yet, or scaffolded files I don‚Äôt need are all examples of files that can‚Äôt go into gitignore, but I don‚Äôt want them yet.\n\ngit add . throws all of these into the commit without so much as a warning, but you‚Äôll never have this issue if you‚Äôre intentionally adding files.\n\nLockfile Updates\nI see this one all the time and it‚Äôs especially nasty. During the course of regular development and installing dependences, the version manager‚Äôs lockfile gets updated with some patch changes. Your pull request isn‚Äôt about version changes. git add . will add those changes anyway, in the same commit as the changes you actually want. This one is especially nasty because everyone tends to get these patch updates at the same time, and then there‚Äôs merge conflicts galore, even if you reverse the changes in a second commit. Especially if you reverse the changes in a second commit.\n\nd for ‚ÄúDon‚Äôt add the lockfile‚Äù.\n\nUnintentional Whitespace\nIt‚Äôs really hard to see extra whitespace at the end of a line in your editor. git add -p highlights that whitespace in red, you can remove it from the commit without exiting by using the edit option.\n\n\n\ne for ‚ÄúEdit out extra whitespace!‚Äù\n\nDebugging Statements\nIn the course of problem-solving, we dump debugging statements, commented out debugging statements, and tiny code changes to make debugging easier throughout the application. Skip all those, or edit them out of the final commit, and have beautiful, clean, readable commits that don‚Äôt cause merge conflicts or break the build.\n\nn for ‚ÄúNot this console.log‚Ä¶‚Äù\n\ne for ‚ÄúEdit that out!‚Äù\n\nLocal Environment Changes\nI use WSL with Docker and Rails‚Äôs default filechecker doesn‚Äôt like that, so I have to override it and use a less performant version in all the apps I work with. This is an unusual development setup, and I don‚Äôt expect every app I work with to adopt my filechecker. I just skip this change whenever I make a commit with git add -p. Another common scenario is replacing an API key in your local environment and leaving the original in higher environments. Sometimes you need to tweak things locally, but it might not be appropriate to update the repo with that tweak.\n\nn for ‚ÄúNever add this.‚Äù\n\nSeparate commits with discrete changes\nIdeally commits will describe one discrete change to the codebase, but realistically we make lots of little changes at the same time. In order to create discrete changes with git add ., you have to remove any extraneous changes, or be disciplined about committing after every change and only working on one change at a time. git add -p lets you be more flexible and extract out one discrete change at the end. These discrete commits are easier to cherry-pick into other branches, and make your PR easier to review for other developers.\n\nn for ‚ÄúNot yet!‚Äù\n\nVIDEO DEMO\n\n\n      \n"
} ,
  
  {
    "title"    : "Fibonacci Shawl Pattern",
    "category" : "",
    "tags"     : " ",
    "url"      : "/2023/06/25/fibonacci-shawl-pattern.html",
    "date"     : "June 25, 2023",
    "excerpt"  : "\n  History\n  Pattern    \n      Yarn\n      Stitches\n      Pattern Concept\n      Rows\n    \n  \n\n\n\n  \n  \n  \n  \n\n\nThe Fibonacci Shawl is a gorgeous design that attempts to express Fibonacci‚Äôs sequence through yarn. Each stripe of color represents a num...",
  "content"  : "\n  History\n  Pattern    \n      Yarn\n      Stitches\n      Pattern Concept\n      Rows\n    \n  \n\n\n\n  \n  \n  \n  \n\n\nThe Fibonacci Shawl is a gorgeous design that attempts to express Fibonacci‚Äôs sequence through yarn. Each stripe of color represents a number from Fibonacci‚Äôs sequence.\n\nLet‚Äôs look at teal, for familiarity. There are 13 rows split into two sections - 8 solid rows, and 5 lacy rows. In this way, we can express that 13 is the sum of 8 and 5. Each solid section is the larger of the two numbers, so as we move down the sequence, we see the lacy section become the solid section of the next number in the sequence.\n\n\n\nInstead of constructing the shawl from the bottom up, or top-down, it‚Äôs a right triangle with one straight side. I felt this better expressed the concept of a number sequence because we‚Äôre starting from a straight line (0) and expanding in a single direction. Without the mirrored effect, it‚Äôs easier to see how the sequence increases as well, but this does mean I need more numbers from the sequence to make a big enough shawl to wear.\n\n\n\nThis also allowed me to have a 0 to orient the work from. On each row, each stitch that‚Äôs a Fibonacci number is reversed which adds the tiniest visible stripe in the solid sections.\n\nFinally, I reinforced the concept of 0 (and tidied the edges) by adding a border on the two sides that would represent 0. The bottom, where the color sequence begins, and the side, where our row count begins.\n\nThe result is a beautiful shawl that‚Äôs secretly hiding a detailed math lesson. ‚ù§Ô∏è\n\n\n\nHistory\nThis all started with Toni Lipsey‚Äôs Rancher shawl. It‚Äôs GORGEOUS, with an amazing fade from warm to cool that‚Äôs only possible with that specific colorway that was unfortunately unavailable. This got me thinking about a shawl with small stripes of color, which made me think of Fibonacci‚Äôs number sequence!\n\nFibonacci‚Äôs number sequence is a sequence of numbers where each number is the sum of the two previous numbers!\n1, 1, 2 (1+1), 3 (2+1), 5 (3+2), 8 (5+3)‚Ä¶. and so on and so forth.\nIn software development, we like to use generating it as an easy puzzle, and we use the sequence itself to estimate the complexity of work (because we like to be complicated).\n\nSearching for existing patterns yielded disappointing results. They are all knitting, and I can only crochet, but more importantly, none of them scream Fibonacci sequence to me. The interchanging striped colors really muddy the message for me. Why do they do that?\n\nWell, all shawls are constructed the same way. They start with a small triangle and increase to a larger triangle. You use the least amount of yarn per row at the beginning of the shawl, and the most per row at the end. If I started my shawl at 1, (or if they did) then we‚Äôd have 2 lonely little stitches in one color before the next color change, and final stripe would be 55 rows of 89-143 stitches. My yarn usage and color balance would be way off!\n\nThe other patterns solve this by having interchanging stripes of Fibonacci‚Äôs sequence, but we‚Äôll fix it by reversing the sequence! This means that our final number of the sequence needs to come first, and as soon as that section is done, we‚Äôre locked in on the shawl size. There was a lot of math and planning and Google spreadsheets, and a brief period where I thought about expressing recursion using marling, but ultimately, I landed on 55 starting rows, with a final row count of 143. This was a little small for a shawl, but the alternative was 232!!\n\n\n\nThe next modification was to the shape. Instead of the obtuse triangle expanding on both sides, I wanted to use a right triangle to make it easier to convey as a number sequence. The straight edge makes it feel more like an expanding number sequence, because it‚Äôs not mirrored or angled.\n\nI found a good example of how to make a simple triangle shawl, but I wasn‚Äôt loving the mesh. Too complicated, hard to convey my sequence, and it‚Äôd be too chilly in the evenings. That‚Äôs when the bronwyn shawl brought my next inspiration. The beautiful sections of solid and lacy space had me thinking about how I could convey which numbers summed to equal my Fibonacci number! I thought it would look best if I had the larger number be the solid section, and that section always come first. I was really excited for the lacy section (the smaller number) to equal the size of the solid section (the larger number) of the next number in the sequence! Unfortunately, due to the half-double crochets in the lacy section, this didn‚Äôt pan out in reality. This is the number one thing I‚Äôd change if I was making this shawl again.\n\nNow that I‚Äôd settled on a design, it was time to buy yarn! I selected some lion brand truboo yarn for the softness and sustainability. Unfortunately their color choices are‚Ä¶ limited. The green section is actually cotton bamboo because I hated all the greens from truboo. The cotton bamboo was a joy to work with. It was smooth, the yarn didn‚Äôt split, and the color has a lot of depth. The truboo was spitty, shiny, and is already fuzzy. If I made this again, I‚Äôd make it with cotton bamboo. It‚Äôs wonderfully soft and plush with great stitch definition.\n\n\n\nPattern\nYarn\n\n  Truboo Sienna\n  Truboo Cameo\n  Cotton Bamboo Snapdragon\n  Truboo Seafoam\n  Truboo Aqua\n  Truboo Blue\n  Border - Cotton Bamboo Magnolia\n\n\nStitches\n\n\n  \n    \n      ch\n      chain\n    \n    \n      sc\n      Single crochet\n    \n    \n      2sc\n      Single crochet increase, put 2 single crochets in one stitch from the previous row\n    \n    \n      rsc\n      Reversed single crochet, make your single crochet in the wrong side instead of the right side of the fabric\n    \n    \n      2rsc\n      Reversed single crochet increase, put 2 reversed single crochets in one stitch from the previous row\n    \n    \n      hdc\n      half-double crochet\n    \n    \n      2hdc\n      Half-double crochet increase, put 2 half-double crochets in one stitch from the previous row\n    \n  \n\n\nPattern Concept\n\nYou‚Äôre going to increase on one side every row. For each Fibonacci number, counting from the non-increase side, you‚Äôll reverse the single crochet. Each stripe of color is split into 2 sections - solid single crochets for the larger number, and alternating rows of single crochets and half-double crochets for the smaller number. Always start with a row of hdc/ch when changing to the next number. Ignore all the turning chains, just use them in the border, or pretend they don‚Äôt exist.\n\nHere‚Äôs a table of when you swap colors and start with the lacy hdc/ch section.\n\n\n  \n    \n      Total Rows\n      Last Row\n      First Hdc row\n      Total Solid Rows\n      Total Lacy\n    \n  \n  \n    \n      55\n      55\n      35\n      34\n      21\n    \n    \n      34\n      89\n      77\n      21\n      13\n    \n    \n      21\n      110\n      103\n      13\n      8\n    \n    \n      13\n      12\n      119\n      8\n      5\n    \n    \n      8\n      131\n      129\n      5\n      3\n    \n    \n      5\n      136\n      135\n      3\n      2\n    \n    \n      3\n      139\n      139\n      2\n      1\n    \n    \n      2\n      141\n      141\n      1\n      1\n    \n    \n      1\n      142\n      -\n      1\n      0\n    \n    \n      1\n      143\n      -\n      1\n      0\n    \n  \n\n\nRows\n\n\n  Row 0: Make a magic circle, ch 2.\n  Row 1: rsc 2 in magic circle, ch 2, turn (2)\n  Row 2: 2rsc, rsc, ch 2, turn (3)\n  Row 3: rsc 2, rsc and sc in last rsc of previous row, ch 2, turn (4)\n  Row 4: rsc and sc in last sc of previous row, rsc 3, ch 2, turn (5)\n  Row 5: rsc 3, sc, rsc and sc in last sc of previous row, ch 2, turn (6)\n  Row 6: 2sc, rsc, sc, rsc 3, ch 2, turn (7)\n  Row 7: rsc 3, sc, rsc, sc, sc and rsc in last sc of previous row, ch 2, turn (8)\n  Row 8: sc and rsc in last rsc of previous row, sc 2, rsc, sc, rsc 3, ch 2, turn (9)\n  ‚Ä¶\n  Row 34: sc and rsc in last sc of previous row, sc 12, rsc, sc 7, rsc, sc 4, rsc, sc 2, rsc, sc, rsc 3, ch 2, turn (35)\n  Row 35: hdc, ch and skip a stitch repeat 16 times hdc, ch but do not skip a stitch, hdc, ch 2, turn\n  Row 36: 2sc, rsc, sc 12, rsc, sc 7, rsc, sc 4, rsc, sc 2, rsc, sc, rsc 3, ch 2, turn (37)\n  Row 37: hdc, ch and skip a stitch repeat 17 times hdc, ch but do not skip a stitch, hdc, ch 2, turn\n  ‚Ä¶\n  Row 55: hdc, ch and skip a stitch repeat 26 times hdc, ch but do not skip a stitch, hdc, tie off (56)\n  Row 56: This row is a color change. The honorable thing to do is work in reverse towards the straight edge, but you can start back at 0 because it‚Äôs a color change, so that‚Äôs what we‚Äôll do.\n  Row 56: rsc 3, sc, rsc, sc 2, rsc, sc 4, rsc, sc 7, rsc, sc 12, rsc, sc 20, rsc and sc in the hdc from the previous row, ch 2, turn\n  Row 57: 2sc, rsc, sc 20, rsc, sc 12, rsc, sc 7, rsc, sc 4, rsc, sc 2, rsc, sc, rsc 3, ch 2, turn\n\n\nHopefully at this point, you can use the instructions and color chart to finish the pattern!\n\nBorder:\n\n  Start at the first row, go along the straight side of the shawl, put one sc in each row. 2sc in the last row, turn the work so the last row is ready to work. Place one sc in each stitch of the last row. ch 2, turn.\n  sc in each stitch along one side. 2sc in the center of your 2sc from the previous row. sc in each stitch of the other side. ch2, turn.\n  hdc, ch and skip a stich repeat for each stitch on one side. 2hdc in the center of your 2sc from the previous row. ch and skip a stitch, hdc repeat for each stitch on this side. ch 2, turn.\n  sc in each stitch along one side. 2sc in the center of your 2hdc from the previous row. sc in each stitch of the other side. ch2, turn.\n\n\n\n\n"
} ,
  
  {
    "title"    : "Your First Open-source Contribution",
    "category" : "talks",
    "tags"     : " ",
    "url"      : "/talks/2021/11/11/open-source-contributing.html",
    "date"     : "November 11, 2021",
    "excerpt"  : "Most folks get stuck in open-source on one of the three following barriers:\n\n  Getting Started\n  Building the PR on a Forked Repo\n  Managing feelings around the review process\n\n\nI want to remove those barriers for you, and give you a realistic vie...",
  "content"  : "Most folks get stuck in open-source on one of the three following barriers:\n\n  Getting Started\n  Building the PR on a Forked Repo\n  Managing feelings around the review process\n\n\nI want to remove those barriers for you, and give you a realistic view of how to contribute to open-source projects, and get your PRs merged.\n\nWatch the Recording\n\n\n      \n\nSlides\n\n\n\nReferences\n\nI don‚Äôt recommend picking an issue based on it being a ‚ÄúGood First Issue‚Äù but these sites are good to identify your ‚ÄúGood First Repo‚Äù.\n\n  Good First Issue\n  Good First Issues\n\n\nHere are a few of the PRs I‚Äôve worked on that I mentioned in my talk.\n\n  ComparisonValidator is a nice example of extending functionality.\n  Documentation is hard, but always needed. Here‚Äôs documentation explaining how Rails‚Äôs order works.\n  Let‚Äôs add Liquid Tags to Forem! This taught me about Liquid tags so I was ready for Jekyll-Twitch.\n  Unloved PR that taught me about Forked Repos.\n  CASA has small focused issues. This leads to small PRs.\n\n\nHere are a few Ruby Repos I mentioned and recommend.\n\n  CASA is a Ruby For Good Rails app that organizes volunteers for foster youth. They have GREAT issues, amazing response time, and are incredibly welcoming.\n  ConfBuddies is a Rails app that helps you attend conferences with your friends! I‚Äôm the maintainer, so if you need a friendly face, this is a good place to start.\n  Forem, the platform supporting Dev.To and CodeNewbies, has a welcoming community, and are incredibly responsive to new PRs, however, I‚Äôve had issues with their Docker dev setup.\n  Rails is a web application framework in Ruby. I‚Äôm not going to lie to you. Getting a PR merged here is challenging. There‚Äôs a lot of feedback, a lot of contributors, and not a lot of maintainers. But you can have a lot of impact.\n  Jekyll-Twitch was mentioned, but is actually feature complete. You can make your own gem though!\n\n"
} ,
  
  {
    "title"    : "Software Architecture: Different vs Wrong with Casey Dement",
    "category" : "podcast",
    "tags"     : " ",
    "url"      : "/podcast/2021/07/07/polyglot-casey-dement.html",
    "date"     : "July 7, 2021",
    "excerpt"  : "I met Casey at one of my previous jobs and admire the way he designs systems and discusses architecture. He‚Äôs a long-time software architect who has been designing solutions for businesses of all sizes for 26 years. I‚Äôve always wanted to be a soft...",
  "content"  : "I met Casey at one of my previous jobs and admire the way he designs systems and discusses architecture. He‚Äôs a long-time software architect who has been designing solutions for businesses of all sizes for 26 years. I‚Äôve always wanted to be a software architect, but the timing has never worked out. This was a really fun podcast though! Casey has a bunch of great stories to share about designing systems, unintended advertising side effects, and technology hottakes!\n\n\n  Casey: All the time. Pretty much any time you try to take the initiative and do something new and cool, there‚Äôs always going to be lots of unintended consequences.\n\n\n\n  Rachael: One of the challenges of having power is the fact that you are not the person who is doing the thing. It‚Äôs really easy to tell a computer, ‚ÄúI would like you to do this thing, go do this thing.‚Äù And it‚Äôll do exactly what you told it to do. If you tell a person that, you can hope that what they bring back to you is that thing, [‚Ä¶]But at the end of the day, you can‚Äôt make them do that thing. You can just repeatedly tell them over and over and over again, ‚ÄúI would like you to do this thing. Please do this thing in the way that I have drawn out in the pretty diagram.‚Äù\n\n  Casey: Well, and so much of it is there‚Äôs some perspective that you have because you‚Äôre looking at a certain set of concerns, and there‚Äôs some perspective they have because they‚Äôre looking at a certain set of concerns. And I take it as a given that two bright people looking at the same set of information will come to reasonably compatible conclusions.\n\n\n\n  Casey: And when they go out and build their piece of it, it all fits together. Legos don‚Äôt work if one person is making bricks with circles and another one‚Äôs making bricks with squares.\n\n\nTechnology Review\n\n  Casey: Yep. Rust is interesting. Rust is a language that can give you the low-level capabilities and performance of C or C++ without the existential threat to your life that comes from choosing to use C as the programming language that you‚Äôre going to work in because C is the language where you can make a very, very small hard-to-find mistake that allows national security to be undermined.\n\n\n\n  Casey: I‚Äôve actually found that I get a really good advantage out of coupling MongoDB and a relational database together and representing the actual structured, detailed objects in Mongo and then putting the relationships between things in the relational database. And then, I do my queries in the relational database, get back a list of the objects that I need, then go fetch those objects from Mongo, and use those to populate whatever interface or interaction I‚Äôm dealing with.\n\n\n\n  Casey: So I‚Äôll answer that question this way, the Weather Channel originally was built on top of Oracle. They were paying a lot of money to Oracle and had full Oracle enterprise support. And The Weather Channel dumped Oracle and went to MySQL. Ironically, Oracle later bought MySQL. What they found is that when they had a problem with the database, and they were dealing with the MySQL open-source community, the level of expertise that they could access and the rapidity, the latency with which they would get responses back was much better than what they were getting paying Oracle for expert support.\n\n\nI have to stop now. I want to quote this whole podcast!\n\nListen to the Podcast\n"
} ,
  
  {
    "title"    : "Slaying Dragons ‚Äì Inside A Dark Room with Amir Rajan",
    "category" : "podcast",
    "tags"     : " ",
    "url"      : "/podcast/2021/06/16/amir-rajan-polyglot.html",
    "date"     : "June 16, 2021",
    "excerpt"  : "Amir Rajan is a hyperpolyglot with over 15 years of industry experience. Amir is also the creator of A Dark Room iOS. This RPG conquered the world and took over the Number 1 spot in the App Store, and placed in the Top 10 paid apps across 70 count...",
  "content"  : "Amir Rajan is a hyperpolyglot with over 15 years of industry experience. Amir is also the creator of A Dark Room iOS. This RPG conquered the world and took over the Number 1 spot in the App Store, and placed in the Top 10 paid apps across 70 countries. He‚Äôs also the CEO of DragonRuby LLP, creators of DragonRuby Game Toolkit and RubyMotion, which is what we‚Äôre here to talk about today.\n\nListen to the Podcast\n"
} ,
  
  {
    "title"    : "Docker isn&#39;t Magic",
    "category" : "talks",
    "tags"     : " ",
    "url"      : "/talks/2021/05/27/docker-isnt-magic.html",
    "date"     : "May 27, 2021",
    "excerpt"  : "An exploration of 4 open-source docker setups, why Docker isn‚Äôt magic, and why it‚Äôs worth it to use it anyway.\n\nWatch the Recording\n\n      \n\nSlides\n\n\n\nReferences\n",
  "content"  : "An exploration of 4 open-source docker setups, why Docker isn‚Äôt magic, and why it‚Äôs worth it to use it anyway.\n\nWatch the Recording\n\n      \n\nSlides\n\n\n\nReferences\n"
} ,
  
  {
    "title"    : "The Invisible Zoom Streaming method",
    "category" : "",
    "tags"     : " streaming, zoom",
    "url"      : "/2021/05/22/invisible-zoom.html",
    "date"     : "May 22, 2021",
    "excerpt"  : "Your stream guests know and love zoom, but it doesn‚Äôt look very professional to just share a zoom window on your stream. This technique will allow for easily adding guests and sharing screens, without cropping zoom windows.\n\nHide Zoom\n1. Join the ...",
  "content"  : "Your stream guests know and love zoom, but it doesn‚Äôt look very professional to just share a zoom window on your stream. This technique will allow for easily adding guests and sharing screens, without cropping zoom windows.\n\nHide Zoom\n1. Join the zoom call with your camera\nThe first step is joining a zoom call. You must use the desktop application to follow the rest of these steps. Your video feed will run through zoom. This is much easier, and your guests will see you.\n\n2. Add zoom to OBS\nCreate a window capture in OBS, and select your zoom window. Exclude the cursor, and only capture the client area to remove any application window styling.\n\n\n\n3. Unmirror your video\nInside zoom, your video will display mirrored by default. This only inverts your image on your zoom instance. Now that we‚Äôre sharing that instance with the world, you want to unmirror it so text displays normally. Under video settings, ensure ‚ÄúMirror my Image‚Äù is unchecked.\n\n\n\nOptional: Slide ‚ÄúTouch up my appearance‚Äù all the way into ‚Äúturn my bags into smokey eyes‚Äù territory. No foundation? No problem!\n\n4. Share your visible guests\nYou can hide everyone who has chosen not to share their video by checking hide non-video participants. This makes it easy to cue up guest changes, and also have a hidden producer running the show. If you have multiple guests, having a producer who can pass messages like ‚Äú5 minutes left‚Äù or communicate with the next guest via zoom chat is really helpful.\n\n\n\nWhile you‚Äôre here, optionally uncheck ‚ÄúAlways display participant names on their video.\n\n5. Hide the rest of the zoom UI\nUncheck ‚ÄúAlways show meeting controls‚Äù to have the option of hiding zoom‚Äôs buttons.\n\nAlt will cycle through displaying the zoom UI, showing participant names, and hiding everything. If you want to crop zoom‚Äôs UI out, that also works. Note that hovering over the zoom UI area will bring it back, so keep your cursor above the bottom third.\n\n\n\nYour Zoom window in OBS should look like this.\n\n6. Hide Zoom in OBS\nChromakey works by removing everything of one color. Normally, that color is green, but we can make it Zoom Grey. Chromakey also adds a little variability to catch green shadows, but we can strip all that range out, because zoom doesn‚Äôt have lighting or shadows. Add a filter to the Zoom window source in OBS. Use a color key with a custom color of 1a1a1a, and set the similarity and smoothness all the way down to 1.\n\n\nPlace an image beneath the zoom window in OBS, and now you‚Äôve got a pretty great looking setup!\n\n\n\nScreenshare in Zoom\nAll of this is good, but we need screensharing for the real magic of zoom to activate. Don‚Äôt worry, we won‚Äôt have separate windows and captures. Seamless transitions from a conversation to presentation.\n\nKeep screenshare in one window\nBy default, when someone shares their screen, Zoom goes full-screen, and moves audience video into a second window, but you can set zoom to share a screen within the current view.\n\nTurn on side-by-side view.\n\n\nYour presentation will be on the left and your guests can be added and drop on the right!\n\n\n\nNow there‚Äôs a great looking zoom presentation on an image background. You can sub in speakers without issue, and people can swap between presentations!\n\nFlaws\nYou cannot screenshare while producing. It will change your whole view. A secondary computer or your guest can screenshare.\n\nZoom does not resize windows automatically. You will need to adjust the zoom level if the user‚Äôs screen is very large or very small.\n\nDon‚Äôt forget audio!\nAudio is a whole different challenge. When you capture audio from zoom, you will get everyone else‚Äôs audio, but not your own. Zoom doesn‚Äôt play your own audio back to you. There are two ways to handle this.\n\n  Have a producer who‚Äôs responsible for communicating with guests, and streaming the zoom, but doesn‚Äôt appear on-screen. This has the added benefit of giving you a moderator who‚Äôs focused on chat and production.\n  Stitch your audio together using loopback, voicemeeter, or two audio inputs in OBS. If you use two audio inputs in OBS, then you will have issues captioning, because all captioning plugins that I know of use one audio input as the source.\n\n\nSummary\nThis isn‚Äôt the greatest and most technically proficient guest setup that has ever existed, but it is a robust, easy solution that uses technology your guests are confident in. It‚Äôs a great option for panels or small-scale live conferences and meetups. Let me know if you try this out, or come up with ways to deal with those flaws above!\n"
} ,
  
  {
    "title"    : "Jekyll Talks Page",
    "category" : "",
    "tags"     : " ruby, jekyll, talks",
    "url"      : "/2021/05/14/talks-page-in-jekyll.html",
    "date"     : "May 14, 2021",
    "excerpt"  : "I‚Äôm giving a talk at FutureStack! I want to share my new talk with people on my portfolio site, because SpeakerDeck and SlideShare cost money. I‚Äôm a developer, why do I need to pay a company and expose you to ads to share my slides?\n\nRequirements\n...",
  "content"  : "I‚Äôm giving a talk at FutureStack! I want to share my new talk with people on my portfolio site, because SpeakerDeck and SlideShare cost money. I‚Äôm a developer, why do I need to pay a company and expose you to ads to share my slides?\n\nRequirements\nI want to share as much contextual information as possible, and expose the talk in as many formats as possible. The key things I need to share are:\n\n\n  Talk title\n  Description of the talk\n  Slides embedded in the page\n  YouTube video embedded in the talk page\n  Salient points summarized in text\n\n\nI also want to make sure that the talk is easy to share, so we‚Äôll give it some good SEO, and a nice Twitter card.\n\nWe‚Äôll need a separate page to aggregate the talks. I want this page to be responsive, and expose the talk front page and description.\n\nTechnical Plan - Show Page\nLet‚Äôs start with a plan for how to build the show page for talks. A show page will show one talk, and all its details.\n\nPage Type\nJekyll has three ways to create new pages on your site: Pages, Posts, and Collections.\n\nPages are standalone content that exists at a permalink. It‚Äôs good for /about, /pricing, and /talks pages. If we stored talks here, then we‚Äôd have urls like /docker-isn&#39;t-magic and indoor-hazards-and-plants-that-cure-them, but we‚Äôd have to create a data structure to hold all these talks for the talks page.\n\nPosts are used for blog posts! They‚Äôre automatically added to your RSS Feed, if you have one. They must always be associated with a date, which is why they‚Äôre commonly located at /&amp;lt;year&amp;gt;/&amp;lt;month&amp;gt;/&amp;lt;day&amp;gt;/&amp;lt;post-title&amp;gt; and must have a filename like YEAR-MONTH-DAY-title. If you‚Äôre viewing this page at chael.codes instead of Dev.To or the Relicans, then you‚Äôre looking at a Post page. These posts are in a collection called site.posts. You can also assign a category (or categories) to a post. If you assign a category in the frontmatter, then you can query by that category from liquid.\n\n{% for talk in site.categories.talk %}\n    Title: {{talk.title}}\n    Description: {{talk.excerpt}}\n{% endfor %}\n\n\nThe last type is a collection of pages. These do not need to be associated with a date, and can be queried. These do not update on the RSS Feed, but can have a separate RSS Feed. The nice part about this is that we‚Äôd be able to cut off the date part of the url.\n\nAfter evaluating the options, I plan to share these as normal posts. We can use the date of the conference to release it on the date of. The date in the url is a little inconvenient, but I love the idea of sharing new talks in the RSS Feed, and I don‚Äôt want to deal with the hassle of making an array for pages. The category feature will make our talks index page easy.\n\nSlides\nI build my slides out on Google Slides, and they have an embed. Normally, I would be focused on turning this into a liquid embed, but I need to get this set up quick, and I don‚Äôt have time before futurestack, so I‚Äôll be embedding it directly in the file.\n\n\n  I didn‚Äôt use slide share or speakerdeck. SpeakerDeck wants to put their branding on my slide deck unless I pay a fee. SlideShare is also trying to make money from hosting slides. Why? Why are we paying these companies money to display our own content on their site? It is because it‚Äôs pretty? Why does link.tree exist? Let‚Äôs build our own.\n\n\nYouTube\nWe‚Äôll pull in YouTube using the Jekyll-Youtube gem. This gives us access to a liquid tag for YouTube, so we can embed the recording of the talk.\n\nTalks Index Page\nAn index page will list all our talks. Let‚Äôs build this from scratch with fresh new SCSS and LOTS of advice from chat. We‚Äôll have an image of the first slide, and then the description of the talk excerpt in a card shape. I want to use flexbox to make the list responsive.\n\nSharing\nJekyll-Seo is the main gem for managing seo and sharing. We can add frontmatter to the page that will update how Twitter cards look.\n\n---\ndescription: &amp;lt;talk description&amp;gt;\nimage: &amp;lt;image of first slide&amp;gt;\ntwitter:\n  card: summary_large_image\n---\n\n\nAt this point, we should have two new pages, one for showing off all my talks, and another page that‚Äôll host my very first talk. &amp;lt;3\n"
} ,
  
  {
    "title"    : "Jekyll-Twitch Demo!",
    "category" : "",
    "tags"     : " ruby, jekyll, open-source, gem",
    "url"      : "/2021/04/22/jekyll-plugin-demo.html",
    "date"     : "April 22, 2021",
    "excerpt"  : "Let‚Äôs build a simple demo website in our Jekyll-Twitch gem! This will allow us to test inside the repo, and demonstrate the plugin live to users. It‚Äôll serve as documentation, demo, and local testing environment!\n\n\n  This blog is a companion guide...",
  "content"  : "Let‚Äôs build a simple demo website in our Jekyll-Twitch gem! This will allow us to test inside the repo, and demonstrate the plugin live to users. It‚Äôll serve as documentation, demo, and local testing environment!\n\n\n  This blog is a companion guide to a Twitch stream that will happen 04/23 at 15:00 UTC.\n\n\nAbout a month ago, I created a Jekyll plugin called Jekyll-Twitch that adds a Jekyll Liquid tag to a repo. This liquid tag lets users embed a Twitch clip in their sites using only a clip url. Right now, it‚Äôs difficult to test, because I have to connect it to my personal site which is in a different repo, and there‚Äôs no way for potential users to see it working.\n\nCreate a Project Site in GitHub Pages\n\nGitHub Pages offers a really nice way to handle this! GitHub pages lets you create a documentation site inside of a git repo at /docs. This is called a [Project site], and would be hosted at http(s)://&amp;lt;username&amp;gt;.github.io/&amp;lt;repository&amp;gt; which would be https://chaelcodes.github.io/jekyll-twitch. This will allow every fork to be deployed to the contributer‚Äôs account. We‚Äôre gong to use the default theme to keep this as simple and lightweight as possible.\n\nInside the Jekyll-Twitch repo, we‚Äôll do the following:\n\n  Open the repo at the top-level\n  Install jekyll - gem install jekyll\n  Create a docs Jekyll site jekyll new docs This must be called docs to deploy to GitHub Pages\n  Test the site using bundle exec jekyll serve (use --livereload to see changes instantly!)\n  Create a page for each plugin.\n\n\nCreate a page for each Plugin\n\nNow we want to demonstrate the capabilities of our plugin. For Jekyll-Twitch, we have 3 Configurations: Clip, Broadcast, and VoD (Highlight), so we‚Äôll create 3 pages to demonstrate each config. We‚Äôll include the example using raw tags that let you show the liquid syntax with embedding it.\n{% twitch https://www.twitch.tv/chaelcodes/clip/DeterminedSweetRedpandaDoritosChip-pQiRlDz6rQ9uvuuq %}\nThen we need to include the plugin as a gem. We‚Äôre going to reference the gem using GitHub instead of rubygems, and reference the branch to make it easy for users to test their own branch, and test the current version on main, instead of the latest released version. We‚Äôll also put it in jekyll_plugins, so Jekyll knows to use it.\n\n\n  Add your gem to the Gemfile to the jekyll_plugins group using GitHub\n    group :jekyll_plugins do\n  gem &#39;jekyll-twitch&#39;, &#39;https://github.com/sparklemotion/nokogiri.git&#39;, branch: &#39;main&#39;\nend\n    \n  \n  Add your plugin to Jekyll‚Äôs _config.yml\n    plugins:\n  - jekyll-twitch\n    \n  \n  Install the gem - bundle install inside your /docs/ folder\n  Restart the server - bundle exec jekyll serve (use --livereload to see changes instantly!)\n\n\nDeploying the Example repo\n\nIf you tried to deploy the last site to GitHub pages using their automatic deployment, then you quickly ran into issues.\n\n\n  GitHub Pages does not support custom gems\n  GitHub Pages is stuck on Jekyll 3\n\n\nThat‚Äôs okay though, we can deploy the site to the gh-pages branch using GitHub actions. helaili/jekyll-action@v2 supports deploying a project site to a gh-pages branch. I‚Äôve done this previously for my portfolio site.\n\nname: Build and deploy Jekyll site to GitHub Pages\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  github-pages:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - uses: helaili/jekyll-action@v2\n        with:\n          jekyll_src: &#39;docs&#39;\n          target_branch: &#39;gh-pages&#39;\n          token: $\n\n\nAt this point, we should have a demo site that automatically deploys on new pushes to main, and works great as a testing environment!\n\n\n  This blog is a companion guide to a Twitch stream that will happen 04/23 at 15:00 UTC.\n\n"
} ,
  
  {
    "title"    : "Sadistic Self-Care Survival Game",
    "category" : "",
    "tags"     : " ruby, DragonRuby, open-source, Amir Rajan, game dev",
    "url"      : "/2021/04/15/sadistic-self-care-survival-game.html",
    "date"     : "April 15, 2021",
    "excerpt"  : "Your body has been kind to you. It has tolerated your dehydration, exhaustion, hunger, and lack of exercise without complaint for YEARS. That ends today. This game built using the DragonRuby framework will remind you how generous your body has bee...",
  "content"  : "Your body has been kind to you. It has tolerated your dehydration, exhaustion, hunger, and lack of exercise without complaint for YEARS. That ends today. This game built using the DragonRuby framework will remind you how generous your body has been with its mistreatment.\n\n\n  This blog post is a companion guide to a Twitch stream on 4/16 at 1500 UTC.\n\n\n\n\nLet‚Äôs start with the tools. DragonRuby is a game framework built on the Ruby specification. We‚Äôll be joined by one of the creators of that framework, Amir Rajan! It focuses on 2D game design, and the entire game state is stored in an object called args. It supports PC, Mac, Linux, Raspberry Pi, Web (wasm)iOS, Android, Nintendo Switch, XBOX One, and PS4. Let‚Äôs target this one at a web release!\n\nNOW IT‚ÄôS TIME FOR THE GAME! I want to give the player a feeling of desperation as they use self-care techniques to keep their body alive and functioning. I plan to utilize status bars that slowly clutter the screen to help create that desperate feeling. For the first stream I want to focus on building one full core gameplay loop, then adding the rest.\n\nIn order to create the simplest version possible, I‚Äôd like to focus on the task screen and status bars. The game will start on a laptop screen with a üçΩ food status bar, ü•§ water status bar, and progress bar running on the screen.\n\n\n\nThe progress bar starts at 0%, and every tick, it increments by the product of all active status bars. If you have a full water and food bar, it increments by 1, but if your food and water are half-full, then it increments by .25. When the progress bar reaches 100, the player receives üíµ$50. The time to completion is always displayed above the task.\n\nIf any status bar reaches 0, and there are no warnings for this, the character dies, and it‚Äôs Game Over for the player. The status bars can be refilled by drinking water from a water bottle or eating a granola bar from the desk.\n\nDrinking water and eating food to keep your status bars up so tasks complete faster is a good start, but it‚Äôs meaningless if you run out of food or can‚Äôt spend the mokney, so let‚Äôs implement a store!\n\n\n  \n    \n      Item\n      Cost\n      Description\n    \n  \n  \n    \n      Pomodoro Timer\n      $20\n      Saves task process every 25%\n    \n    \n      Granola Bar\n      $2\n      Increases food by 10 points\n    \n    \n      Sandwich\n      $8\n      Increases food by 40 points, takes 5s to make\n    \n  \n\n\nWe also need to implement some breaks to refill your water bottle, make sandwiches, and do something about all that water you‚Äôve been drinking. I‚Äôm not sure if we‚Äôll get to that part though. I‚Äôd like to implement additional status bars like üç∫ pee, üí© waste, üí¢ stress, üí´soreness, and üí§tiredness. I think completing tasks should increase stress and soreness, and tiredness should gradually rise! Maybe we can take a break to reduce stress and tiredness, and do some stretches to reduce soreness. I feel a whole system building out of this, but let‚Äôs start with hunger and thirst!\n\n\n  This blog post is a companion guide to a Twitch stream on 4/16 at 1500 UTC.\n\n"
} ,
  
  {
    "title"    : "Lending some color to Tokei Open-Source",
    "category" : "",
    "tags"     : " rust, open-source, maxjacobson, tokei",
    "url"      : "/2021/04/08/tokei-open-source.html",
    "date"     : "April 8, 2021",
    "excerpt"  : "Time for another open-source adventure! We‚Äôll be joined by Max Jacobson as we visit the Rust cli-tool Tokei. Tokei generates statistics around your code and language usage. For example, chael.codes looks like:\n\n\nForem, the repo behind therelicans....",
  "content"  : "Time for another open-source adventure! We‚Äôll be joined by Max Jacobson as we visit the Rust cli-tool Tokei. Tokei generates statistics around your code and language usage. For example, chael.codes looks like:\n\n\nForem, the repo behind therelicans.com and dev.to, looks like this:\n\n\nWe‚Äôre going to pick up an issue with a lot of discussion that hasn‚Äôt been touched in 10 months that I personally like. Those screenshots before weren‚Äôt very engaging, right? Let‚Äôs add some lovely color to Tokei‚Äôs terminal output!\n\n\n  There are some requirements listed out in the issue above.\n  \n    It must look good in light and dark mode terminals\n    A crate should manage colorizing the output\n    A color flag should manage color output --color (always|auto|never)\n    thick rows === should be bold and the thin rows ‚Äî dimmed\n  \n\n\nI think it‚Äôd look nice to give all the languages a cyan color, and emphasize the subtotals.\n\nFirst step is identifying how we‚Äôll cover color output, and the issue points us to colored which is based on a Ruby gem of the same name. Usage is very straightforward. println!(&quot;Hello, {}!&quot;, &quot;world&quot;.green().bold()) will use the terminal‚Äôs colors, and bold the text.\n\n\n  Note that ‚Äúcyan‚Äù or ‚Äúgreen‚Äù may not always be cyan or green, they‚Äôre just roles in your terminal color scheme.\n\n\nNext, it‚Äôs time to think about how and where to output these colors. Tokei implements a printer interface in cli_utils.rs which is where I found the headers!\n\nWith some lovely colors and style implemented in Tokei, it‚Äôs time to think about those command line args and turning off color. Some people (like other computers) prefer not to have color. I think we handle this in cli.rs. ShouldColorize respects environment variables like NOCOLOR and CLICOLOR, but flags seem helpful too. We should document this regardless.\n\n\n  This is the technical plan for a stream on 4/9. We‚Äôll start with project setup, and testing out Tokei at 1500UTC, then we‚Äôll be joined by Max Jacobson at 1800 UTC to complete the work of creating our changes and PR.\n\n"
} ,
  
  {
    "title"    : "Retreat and Delete with Write Better Code with Corey Haines",
    "category" : "podcast",
    "tags"     : " ",
    "url"      : "/podcast/2021/04/07/polyglot-corey-haines.html",
    "date"     : "April 7, 2021",
    "excerpt"  : "Cat aficionado and author of Understanding the Four Rules of Simple Design, Corey Haines talks about co-creating the Coderetreat Workshop and spreading his coding knowledge and experience in exchange for a couch to crash on.\n\n\n  Chael: I‚Äôm like, a...",
  "content"  : "Cat aficionado and author of Understanding the Four Rules of Simple Design, Corey Haines talks about co-creating the Coderetreat Workshop and spreading his coding knowledge and experience in exchange for a couch to crash on.\n\n\n  Chael: I‚Äôm like, at some point, you have to handle branching logic.\n\n  Corey: There are lots of ways to handle branching logic without if statements. However, should you use those techniques all the time? No. Sometimes the best way is just an if statement. I wrote one on Friday. I literally wrote an if statement. I don‚Äôt write a lot of if statements, to be fair.\n\n  Chael: [laughs] You‚Äôre like having to protect yourself. You‚Äôre like, ‚ÄúNo, not the if statements. The if statements are coming for me.‚Äù\n\n\n\n  Corey: Yep. And it comes back to that idea that these are called the Four Rules of Simple Design. Why do we have simple design? Why do we care about making simple design? And it‚Äôs entirely because we want to make it easier to change. I like to say that you can‚Äôt have a good design. There‚Äôs no such thing as a good design. There‚Äôs only a better design in a given context because if you have two designs and in the context that you‚Äôre in, one of them is more easily changeable, that‚Äôs a better design.\n\n\n\n  Corey: Ruby never yelled at me.\n\n\n\n  Corey: And I would often tell people like, ‚ÄòI‚Äôve been doing this a long time. I‚Äôve seen the code that gets written, and there‚Äôs no reason to keep this code at all. The world is a better place because it‚Äôs deleted, believe me.‚Äô\n\n\n\n  On single vs double quotes:\nCorey: ‚ÄúAnd I would say if the performance of the string is your bottleneck, that‚Äôs a really great app!‚Äù\n\n\n\n  ‚ÄúBecause your code is already good.‚Äù -ChaelCodes\n‚ÄúYour code is good, it‚Äôs doing the job. Don‚Äôt make it feel bad.‚Äù -Corey Haines\n\n\nListen to the Podcast\n"
} ,
  
  {
    "title"    : "Deploying Jekyll with GitHub Actions, not Pages",
    "category" : "",
    "tags"     : " ruby, jekyll, open-source, github actions",
    "url"      : "/2021/03/25/Deploying-with-github-actions-not-pages.html",
    "date"     : "March 25, 2021",
    "excerpt"  : "I built a Gem that embeds Twitch clips in Jekyll Sites! Unfortunately, I can‚Äôt use it, because I‚Äôm deploying using github-pages. So let‚Äôs change the deploy process. üòè\n\nWhy do we have to do this?\nGitHub pages is where my site is hosted. They requir...",
  "content"  : "I built a Gem that embeds Twitch clips in Jekyll Sites! Unfortunately, I can‚Äôt use it, because I‚Äôm deploying using github-pages. So let‚Äôs change the deploy process. üòè\n\nWhy do we have to do this?\nGitHub pages is where my site is hosted. They require you to add the gh-pages gem instead of the jekyll gem, and they lock the version of Jekyll at 3.9.0. They would have to rework how gh-pages interacts with GitHub servers to support Jekyll 4.0, and that would break all the 3.9 sites out there. They‚Äôve decided not to upgrade instead.\n\nThey also don‚Äôt let you add random plugins. Only their allow list, and my baby Jekyll-Twitch isn‚Äôt on it.\n\nSo, what‚Äôs the plan?\nJekyll has shared a guide on deploying using GitHub Actions. We‚Äôll need a github_pages.yml file in .github/workflows. This is going to trigger every time we push to main. It‚Äôll call out to a jekyll-action created by helaili which deploys the static site on the gh-pages branch. The jekyll-action deprecates JEKYLL_PAT, so we should update their docs while we do this.\n\nThere‚Äôs some additional GitHub configuration necessary. First, the jekyll action needs a github token to push to the gh-pages branch, then GitHub needs to use the gh-pages branch instead of the main branch.\n\nWe‚Äôll need to include a secret in our action to store the github token.\n\nThis was easier than I thought.\n"
} ,
  
  {
    "title"    : "Building Jekyll-Twitch, the gem",
    "category" : "",
    "tags"     : " ruby, jekyll, gem, twitch",
    "url"      : "/2021/03/11/jekyll-twitch-the-gem.html",
    "date"     : "March 11, 2021",
    "excerpt"  : "I‚Äôm really happy with my new website! But I can‚Äôt embed Twitch clips. In fact, no one can embed Twitch clips in Jekyll, because there‚Äôs no liquid tag for it. But we can fix that, not just for us, but for everyone!\n\n\n  This article is the technical...",
  "content"  : "I‚Äôm really happy with my new website! But I can‚Äôt embed Twitch clips. In fact, no one can embed Twitch clips in Jekyll, because there‚Äôs no liquid tag for it. But we can fix that, not just for us, but for everyone!\n\n\n  This article is the technical plan for a stream on Friday, 3/19 where I‚Äôll create a new gem.\n\n\nThis project breaks down into 3 distinct problems:\n\n  Creating a Jekyll Liquid Tag\n  Embedding a Twitch Broadcast, Clip, or VOD\n  Creating a Gem, and publishing it to Ruby Gems\n\n\nCreating a Jekyll Liquid Tag\nJekyll liquid tags allow you to embed user-generated content safely. You might be okay with letting your users embed youtube videos, but you don‚Äôt want them executing random javascript on your website. Liquids are an extensible templating library designed by Shopify. You specify a tag type, and then pass your url or id, and the tag sanitizes it and embeds the content.\n\n\n  Examples:\n  \n    Jekyll-YouTube\n    Jekyll-Twitter\n    Jekyll-Gist (This one is maintained by Jekyll)\n  \n\n\nWe‚Äôll start with Jekyll‚Äôs guide to liquid tags. They say we should create a TwitchTag class inside the Jekyll module, and add a render method for the embeds. We also need to register the tag, Liquid::Template.register_tag(&#39;twitch&#39;, Jekyll::TwitchTag), so Jekyll knows that it can use this tag.\n\nEmbedding a Twitch broadcast, clip, or VOD\nTwitch allows you to embed clips, broadcasts, and VODs using several different embeds. They require that all embeds be served over SSL, and they want to know the parent domain.\n\nOption 1 - Twitch offers an embed that includes chat, login, subscription, and everything normally available on the Twitch site. Unfortunately, it serves everything through JavaScript, and requires you to embed their script on your site.\n\nOption 2 - This is a simple, non-interactive iframe for Twitch that works for VODs and Livestreams. The viewer will have to continue to Twitch to follow or subscribe. This will also work for clips if we customize the url.\n\nOption 3 - This option asks you to embed the same script as option 1, but they‚Äôve used the player instead of the embed. The documentation doesn‚Äôt make the differences clear.\n\nI plan to start with option 2 because it‚Äôs simpler, and I need it for clips. Options 1 and 3 don‚Äôt support clips.\n\nHere‚Äôs the super simple iFrame I‚Äôll be embedding. For clips, the url is: https://clips.twitch.tv/embed?clip=&amp;lt;VeryLongClipTitle&amp;gt;&amp;amp;parent=streamernews.example.com\n&amp;lt;iframe\n    src=&quot;https://player.twitch.tv/?&amp;lt;channel, video, or collection&amp;gt;&amp;amp;parent=streamernews.example.com&quot;\n    height=&quot;&amp;lt;height&amp;gt;&quot;\n    width=&quot;&amp;lt;width&amp;gt;&quot;\n    allowfullscreen=&quot;&amp;lt;allowfullscreen&amp;gt;&quot;&amp;gt;\n&amp;lt;/iframe&amp;gt;\n\nI‚Äôve embedded this before for Forem, so I‚Äôm looking forward to improving it.\n\nHow to Create a Gem\nWe can create the gem using the same tool we use for managing versions: Bundler. Then, I plan to publish it on RubyGems. I‚Äôm really excited about this!\n\nFiles I‚Äôll need\n\n  lib/twitch_tag.rb - this is going to handle formatting and rendering the twitch embed\n  lib/spec/twitch_tag_spec.rb - this is where all our tests around the twitch embed will live.\n\n\nGems I‚Äôll use\n\n  RSpec This is my favorite testing gem. I love how readable and well-organized the tests are.\n  RDoc We‚Äôll use this gem to document our TwitchTag.rb class.\n  Rubocop Just for fun, let‚Äôs add this one too. It‚Äôll keep our styles consistent.\n\n\nNone of these gems will be dependencies. I can run them exclusively in development.\n\nCI/CD\n\nLet‚Äôs reuse the GitHub actions from last week.\nThen we‚Äôll add a new one to run RSpec, and verify that tests pass.\n\nOnce I have the entire repository set up, and the gem built, I‚Äôll want to add it to my own site.\n\nAdding the Gem to chael.codes\nThe Jekyll docs say that GitHub pages excludes gems using the --safe option, but they also say that you can skip that by including it in jekyll-plugins. Let‚Äôs see if it works!\n\n\n  This article is the technical plan for a stream on Friday, 3/19 where I‚Äôll create a new gem, and hopefully embed it in chael.codes. You can check it out at https://twitch.tv/ChaelCodes.\n\n"
} ,
  
  {
    "title"    : "Research for a Jekyll Profile on GitHub pages",
    "category" : "",
    "tags"     : " ruby, jekyll, portfolio",
    "url"      : "/2021/03/11/research-for-a-jekyll-profile-on-github-pages.html",
    "date"     : "March 11, 2021",
    "excerpt"  : "I have too many links and social pages. I can‚Äôt even keep track of them all. What if I could store them all in one place, for free, and build the site using my favorite language? Let‚Äôs build the technical plan!\n\n\n  I‚Äôll be streaming it on Twitch a...",
  "content"  : "I have too many links and social pages. I can‚Äôt even keep track of them all. What if I could store them all in one place, for free, and build the site using my favorite language? Let‚Äôs build the technical plan!\n\n\n  I‚Äôll be streaming it on Twitch at 15:00 UTC, March 12th, and I‚Äôll report back with everything I learned!\n\n\nInitial Requirements\nI need to share my Twitter, GitHub, Twitch, TheRelicans, and Dev.To. (And BitBurner.) I also want to throw random webpages and utilities on it without thinking about hosting providers or tech stack. Then my blogs need a canonical source. I plan to cross-post to Dev.To and therelicans.com, so a blog format that can easily transfer is important. We can lorem ipsum some space with a bio too! I bought a domain, so let‚Äôs show everything there instead of chaelcodes.github.io. ‚ù§Ô∏è\n\nResearch\nFirst, I checked out the Jekyll tutorial to get an idea of how to build a site, and make sure it‚Äôll meet the requirements.\n\nPosts are markdown files stored in a _posts directory. This feels very straight-forward, and my blog posts will all be tracked via git.\n\nLiquids are tags used to safely embed external content in posts and pages. I‚Äôve used them before with Forem (aka Dev.To). These will help with embedding Twitch and talk slides. The markdown format and Liquids mean it‚Äôs easy to convert posts from Jekyll blog to Relican blog. I‚Äôll only need formatting changes for the slides and Twitch liquids.\n\nJekyll Plugins\n\n  \n    Rubocop-Jekyll will check our styles. I also want to try out Github Actions for the automatic linter since I‚Äôm building everything in GitHub.\n  \n  \n    Jekyll SEO Tag - You know how Google and Twitter have descriptions when you link to them? Those come from metadata tags, and this plugin will help us set them up.\n  \n  \n    Type-On-Strap I‚Äôd like a theme that‚Äôs got top-level nav, because I don‚Äôt have many pages to navigate between. This one is well-maintained, has over 450 stars on GitHub, and the image have a parallax effect, which I really like.\n  \n\n\nHosting\nGitHub‚Äôs documentation has an entire section dedicated to documenting GH Pages and Jekyll. The short version is that you make a gh-pages branch, name the repo username.github.io, and replace the jekyll gem with the github-pages gem. Then you configure GH pages in GitHub.\n\nCustom Domain\nOnce I‚Äôve got the site up, it‚Äôs time to think about the domain. I picked up chael.codes on Namecheap, which is a fabulous domain, and right now, it‚Äôs a blank page, but we can fix that! First, we‚Äôll have to configure a CNAME on GitHub, then we‚Äôll add that new CName record to NameCheap.\n\nInformation Architecture\nPlugins, tools, and deploys are all great, but they‚Äôre nothing without the content! I want to keep things as simple as possible, so we‚Äôre starting with only 2 pages.\n\n  Index page contains social links and bio.\n  Blog page lists all blog posts.\n    \n      I have some old blogs, but I‚Äôm not migrating them. They can gather dust in the internet archive, k‚Äôthanks.\n    \n  \n\n\nI can foresee a future where I gather Twitch + Youtube + Blog content around games I‚Äôm playing, but that‚Äôs the future! Not for today! (I think a Games directory with a post page for each would be cool though‚Ä¶)\n\n\n      \n"
} ,
  
  {
    "title"    : "Computers on Wheels ‚Äì Working on Self-Driving Cars with Dr. Mahmood Hikmet",
    "category" : "podcast",
    "tags"     : " ",
    "url"      : "/podcast/2021/03/10/polyglot-mahmood-hikmet.html",
    "date"     : "March 10, 2021",
    "excerpt"  : "Dr. Mahmood Hikmet, Head of Research and Development at Ohmio and HMI Technologies, is currently tasked with overseeing and synchronizing research and development activity for autonomous vehicles.\n\n\n  Mahmood: So we‚Äôre doing the same thing that Ro...",
  "content"  : "Dr. Mahmood Hikmet, Head of Research and Development at Ohmio and HMI Technologies, is currently tasked with overseeing and synchronizing research and development activity for autonomous vehicles.\n\n\n  Mahmood: So we‚Äôre doing the same thing that Roomba does, except we‚Äôre not picking anything up off the ground. [Laughter]\n\n  Rachael: But you‚Äôre picking up people. [Laughs]\n\n  Mahmood: Yeah, through a door, though.\n\n  Rachael: [Laughs]\n\n  Mahmood: Not via the power of suction. [Laughs]\n\n  Rachael: That‚Äôs the next optimization.\n\n\nListen to the Podcast\n"
} ,
  
  {
    "title"    : "What it means to be a Polyglot Developer with Sarah Withee",
    "category" : "podcast",
    "tags"     : " ",
    "url"      : "/podcast/2021/02/03/polyglot-sarah-withee.html",
    "date"     : "February 3, 2021",
    "excerpt"  : "Sarah Withee, commonly known as GeekyGirlSarah, is THE Queen of Puns and # TODO\n\nWhen I heard that we were starting a podcast called The Polyglot, I knew I had to bring on the creator of Code Thesaurus and the &amp;lt;# TODO adjective&amp;gt; Polyglot dev...",
  "content"  : "Sarah Withee, commonly known as GeekyGirlSarah, is THE Queen of Puns and # TODO\n\nWhen I heard that we were starting a podcast called The Polyglot, I knew I had to bring on the creator of Code Thesaurus and the &amp;lt;# TODO adjective&amp;gt; Polyglot developer.\n\nListen to the Podcast\n"
} 
  
  
  
]
